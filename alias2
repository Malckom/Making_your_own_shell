#include <stdlib.h>
#include "shell.h"


/**
 * print_alias - prints the value of an alias, if it exists
 * @name: name of the alias to print
 * @params: parameter struct containing the alias list
 * This function searches the alias list stored in the parameter struct alias_list_head
 * with the given name. If the alias is found, its value is printed to stdout.
 * if alias is not found, an error message is printed to stderr.
 */
void print_alias(char *name, custom_params *params)
{
    unsigned int len = 0;
    list_t *ptr = params->alias_list_head;

    len = _strlen(name);
    while (ptr)
    {
        if (_strcmp_n(name, ptr->alias_name, len - 1) == 0)
            _printf("%s=\'%s\'\n", ptr->alias_name, ptr->alias_value);
        ptr = ptr->next_alias;
    }
    params->exit_status = 0;
}

/**
 * print_all_aliases - prints all aliases in the alias list
 * @params: parameter struct containing the alias list
 *
 * This function iterates through the alias list stored in the parameter struct
 * and prints the name and value of each alias to stdout.
 */
void print_all_aliases(custom_params *params)
{
    print_list_alias(params->alias_list_head);
    params->exit_status = 0;
}

/**
 * print_list_alias - prints the name and value of each alias in a linked list
 * @head: pointer to the head of the linked list
 *
 * This function iterates through the linked list of aliases and print the name
 * and value of each alias to stdout.
 */
void print_list_alias(list_t *head)
{
    if (head)
    {
        print_list_alias(head->next_alias);
        if (head->alias_name != NULL)
            _printf("%s=\'%s\'\n", head->alias_name, head->alias_value);
    }
}


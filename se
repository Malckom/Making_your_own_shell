#include "main.h"
#include <stdlib.h>
#include <stdstr.h>
/**
 * copy_info - copies info to create a new env or alias
 * @name: name (env or alias)
 * @value: value (env or alias)
 *
 * Return: new env or alias.
 */
char *copy_info(char *name, char *value)
{
    char *new;
    int len_name, len_value, len;

    len_name = _strlen(name);
    len_value = _strlen(value);
    len = len_name + len_value + 2;
    new = malloc(sizeof(char) * (len));
    _strcpy(new, name);
    _strcat(new, "=");
    _strcat(new, value);
    _strcat(new, "\0");

    return new;
}

/**
 * set_env - sets an environment variable
 *
 * @name: name of the environment variable
 * @value: value of the environment variable
 * @custom: custom_args structure
 * Return: no return
 */
void set_env(char *name, char *value, custom_args *custom)
{
    int i;
    char *var_env, *name_env;

    for (i = 0; custom->argv[i]; i++)
    {
        var_env = _strdup(custom->argv[i]);
        name_env = _strtok(var_env, "=");
        if (_strcmp(name_env, name) == 0)
        {
            free(custom->argv[i]);
            custom->argv[i] = copy_info(name_env, value);
            free(var_env);
            return;
        }
        free(var_env);
    }

    custom->argv = _reallocdp(custom->argv, i, sizeof(char *) * (i + 2));
    custom->argv[i] = copy_info(name, value);
    custom->argv[i + 1] = NULL;
}

/**
 * _setenv - compares env variables names with the name passed.
 * @custom: custom_args structure (env name and env value)
 *
 * Return: 1 on success.
 */
int _setenv(custom_args *custom)
{
    if (custom->argv[1] == NULL || custom->argv[2] == NULL)
    {
        /*Handle the error, e.g., print an error message*/
        return 1;
    }

    set_env(custom->argv[1], custom->argv[2], custom);

    return 1;
}

/**
 * _unsetenv - deletes an environment variable
 *
 * @custom: custom_args structure (env name)
 *
 * Return: 1 on success.
 */
int _unsetenv(custom_args *custom)
{
    char **realloc_environ;
    char *var_env, *name_env;
    int i, j, k;

    if (custom->argv[1] == NULL)
    {
        /*Handle the error, e.g., print an error message*/
        return 1;
    }
    k = -1;
    for (i = 0; custom->argv[i]; i++)
    {
        var_env = _strdup(custom->argv[i]);
        name_env = _strtok(var_env, "=");
        if (_strcmp(name_env, custom->argv[1]) == 0)
        {
            k = i;
        }
        free(var_env);
    }
    if (k == -1)
    {
        /*Handle the error, e.g., print an error message*/
        return 1;
    }
    realloc_environ = malloc(sizeof(char *) * i);
    for (i = j = 0; custom->argv[i]; i++)
    {
        if (i != k)
        {
            realloc_environ[j] = custom->argv[i];
            j++;
        }
    }
    realloc_environ[j] = NULL;
    free(custom->argv[k]);
    free(custom->argv);
    custom->argv = realloc_environ;
    return 1;
}

